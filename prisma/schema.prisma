// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(ulid())
  followers     Follow[]       @relation("Follower")
  following     Follow[]       @relation("Following")
  notifications Notification[]
  project_user  ProjectUser[]
  Bookmark      Bookmark[]
  count_summary count_summary?
  LikeProject   LikeProject[]
  Comment       Comment[]
  LikeComment   LikeComment[]
  email         String         @unique
  auth_type     String
  username      String
  name          String
  bio           String?
  photo_profile String?
  instagram     String?
  linkedin      String?
  github        String?
  gender        EnumGender?
  email_contact String?
  created_at    DateTime       @default(now())

  @@index([username], name: "idx_username")
}

enum EnumGender {
  MALE
  FEMALE
}

model count_summary {
  id                 String   @id @default(ulid())
  id_user            String   @unique
  user               User     @relation(fields: [id_user], references: [id])
  count_project      Int      @default(0)
  count_comment      Int      @default(0)
  count_following    Int      @default(0)
  count_follower     Int      @default(0)
  count_notif_unread Int      @default(0)
  created_at         DateTime @default(now())

  @@index([id_user], name: "idx_user_count_summary")
}

model Notification {
  id          String   @id @default(ulid())
  id_user     String
  user        User     @relation(fields: [id_user], references: [id])
  title       String
  description String
  is_read     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([id_user, is_read], name: "idx_user_isRead")
}

model Follow {
  id           String   @id @default(ulid())
  id_follower  String
  follower     User     @relation("Follower", fields: [id_follower], references: [id])
  id_following String
  following    User     @relation("Following", fields: [id_following], references: [id])
  created_at   DateTime @default(now())

  @@index([id_follower, id_following], name: "idx_follower_following")
}

model Category {
  id             String    @id @default(ulid())
  slug           String    @unique
  title          String
  count_projects Int       @default(0)
  projects       Project[]
  created_at     DateTime  @default(now())
}

model ProjectUser {
  id         String   @id @default(ulid())
  id_user    String
  user       User     @relation(fields: [id_user], references: [id])
  id_project String
  project    Project  @relation(fields: [id_project], references: [id])
  created_at DateTime @default(now())

  @@index([id_user, id_project], name: "idx_user_project")
}

model Bookmark {
  id         String   @id @default(ulid())
  id_user    String
  user       User     @relation(fields: [id_user], references: [id])
  id_project String
  project    Project  @relation(fields: [id_project], references: [id])
  created_at DateTime @default(now())

  @@index([id_user, id_project], name: "idx_user_project_bookmark")
}

model Project {
  id             String        @id @default(ulid())
  id_category    String
  category       Category      @relation(fields: [id_category], references: [id])
  Comment        Comment[]
  project_user   ProjectUser[]
  bookmarks      Bookmark[]
  LikeProject    LikeProject[]
  slug           String        @unique
  title          String
  content        String
  is_archived    Boolean       @default(false)
  image1         String
  image2         String
  image3         String
  image4         String
  image5         String
  video          String
  count_likes    Int           @default(0)
  count_comments Int           @default(0)
  created_at     DateTime      @default(now())

  @@index([id_category], name: "idx_category")
  @@index([title], name: "idx_title_project")
}

model LikeProject {
  id         String   @id @default(ulid())
  id_user    String
  user       User     @relation(fields: [id_user], references: [id])
  id_project String
  project    Project  @relation(fields: [id_project], references: [id])
  created_at DateTime @default(now())

  @@index([id_user, id_project], name: "idx_user_project_like")
}

model Comment {
  id          String        @id @default(ulid())
  LikeComment LikeComment[]
  id_user     String
  user        User          @relation(fields: [id_user], references: [id])
  id_project  String
  project     Project       @relation(fields: [id_project], references: [id])
  content     String
  count_like  Int           @default(0)
  created_at  DateTime      @default(now())

  @@index([id_project], name: "idx_project_comment")
}

model LikeComment {
  id         String   @id @default(ulid())
  id_user    String
  user       User     @relation(fields: [id_user], references: [id])
  id_comment String
  comment    Comment  @relation(fields: [id_comment], references: [id])
  created_at DateTime @default(now())

  @@index([id_user, id_comment], name: "idx_user_comment_like")
}
