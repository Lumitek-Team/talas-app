generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(ulid())
  name          String
  email         String         @unique
  auth_type     String
  bio           String?
  created_at    DateTime       @default(now())
  email_contact String?
  github        String?
  instagram     String?
  linkedin      String?
  photo_profile String?
  username      String
  gender        genderType?
  Bookmark      Bookmark[]
  Comment       Comment[]
  followers     Follow[]       @relation("Follower")
  following     Follow[]       @relation("Following")
  LikeComment   LikeComment[]
  LikeProject   LikeProject[]
  notifications Notification[]
  project_user  ProjectUser[]
  count_summary count_summary?

  @@index([username], map: "idx_username")
}

model Project {
  id             String        @id @default(ulid())
  id_category    String
  slug           String        @unique
  title          String
  content        String
  is_archived    Boolean       @default(false)
  image1         String?
  image2         String?
  image3         String?
  image4         String?
  image5         String?
  video          String?
  link_github    String?
  link_figma     String?
  count_likes    Int           @default(0)
  count_comments Int           @default(0)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  bookmarks      Bookmark[]
  Comment        Comment[]
  LikeProject    LikeProject[]
  category       Category      @relation(fields: [id_category], references: [id], onDelete: Cascade)
  project_user   ProjectUser[]

  @@index([id_category], map: "idx_category")
  @@index([slug], map: "idx_slug_project")
}

model Comment {
  id          String        @id @default(ulid())
  id_user     String
  id_project  String
  content     String
  count_like  Int           @default(0)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  parent_id   String?
  project     Project       @relation(fields: [id_project], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [id_user], references: [id])
  parent      Comment?      @relation("CommentReplies", fields: [parent_id], references: [id])
  replies     Comment[]     @relation("CommentReplies")
  LikeComment LikeComment[]

  @@index([id_project], map: "idx_project_comment")
}

model Notification {
  id         String    @id @default(ulid())
  id_user    String
  title      String
  created_at DateTime  @default(now())
  is_read    Boolean   @default(false)
  type       notifType
  user       User      @relation(fields: [id_user], references: [id])

  @@index([id_user], map: "idx_user_notification")
}

model Category {
  id             String    @id @default(ulid())
  slug           String    @unique
  title          String
  count_projects Int       @default(0)
  created_at     DateTime  @default(now())
  projects       Project[]
}

model count_summary {
  id              String   @id @default(ulid())
  id_user         String   @unique
  count_project   Int      @default(0)
  count_following Int      @default(0)
  count_follower  Int      @default(0)
  created_at      DateTime @default(now())
  all_notif_read  Boolean  @default(true)
  user            User     @relation(fields: [id_user], references: [id])

  @@index([id_user], map: "idx_user_count_summary")
}

model Follow {
  id           String   @id @default(ulid())
  id_follower  String
  id_following String
  created_at   DateTime @default(now())
  follower     User     @relation("Follower", fields: [id_follower], references: [id])
  following    User     @relation("Following", fields: [id_following], references: [id])

  @@index([id_follower, id_following], map: "idx_follower_following")
}

model ProjectUser {
  id           String            @id @default(ulid())
  id_user      String
  id_project   String
  ownership    ownershipType     @default(OWNER)
  collabStatus collabStatusType?
  created_at   DateTime          @default(now())
  project      Project           @relation(fields: [id_project], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [id_user], references: [id])

  @@index([id_user, id_project], map: "idx_user_project")
}

model Bookmark {
  id         String   @id @default(ulid())
  id_user    String
  id_project String
  created_at DateTime @default(now())
  project    Project  @relation(fields: [id_project], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [id_user], references: [id])

  @@index([id_user, id_project], map: "idx_user_project_bookmark")
}

model LikeProject {
  id         String   @id @default(ulid())
  id_user    String
  id_project String
  created_at DateTime @default(now())
  project    Project  @relation(fields: [id_project], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [id_user], references: [id])

  @@index([id_user, id_project], map: "idx_user_project_like")
}

model LikeComment {
  id         String   @id @default(ulid())
  id_user    String
  id_comment String
  created_at DateTime @default(now())
  comment    Comment  @relation(fields: [id_comment], references: [id])
  user       User     @relation(fields: [id_user], references: [id])

  @@index([id_user, id_comment], map: "idx_user_comment_like")
}

enum genderType {
  MALE
  FEMALE
}

enum notifType {
  FOLLOW
  LIKE_PROJECT
  LIKE_COMMENT
  COMMENT
}

enum ownershipType {
  OWNER
  COLLABORATOR
}

enum collabStatusType {
  PENDING
  ACCEPTED
  REJECTED
}
